# utility
[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
call deoplete#custom#option({
  \   'enable_at_startup': 1,
  \   'enable_smart_case': 1
  \ })
'''

# [[plugins]]
# repo = 'vim-syntastic/syntastic'
# hook_add = '''
# if has("win32") || has("win64")
#     let g:syntastic_mode_map = {
#         \ 'mode': 'passive',
#         \ 'active_filetypes': ['javascript', 'coffee', 'typescript'],
#         \ 'passive_filetypes': []
#         \ }
# else
#     let g:syntastic_mode_map = {
#         \ 'mode': 'passive',
#         \ 'active_filetypes': ['javascript', 'javascript.jsx', 'coffee', 'typescript', 'ruby', 'php', 'scss', 'swift'],
#         \ 'passive_filetypes': []
#         \ }
# end
# let g:syntastic_check_on_open=1
# let g:syntastic_check_on_save=1
# let g:syntastic_auto_loc_list=1
# let g:syntastic_loc_list_height=6
# set statusline+=%#warningmsg#
# " set statusline+=%{SyntasticStatuslineFlag()}
# set statusline+=%*
# let g:syntastic_enable_signs=1
# let g:syntastic_error_symbol='X'
# let g:syntastic_warning_symbol='!'
# let g:syntastic_javascript_checkers = ['eslint']
# let g:syntastic_typescript_checkers = ['tslint']
# let g:syntastic_coffeescript_checkers = ['coffeelint']
# let g:syntastic_ruby_checkers = ['rubocop']
# " let g:syntastic_elixir_checkers = ['elixir']
# " let g:syntastic_enable_elixir_checker = 1
# let g:syntastic_php_checkers = ['phpcs', 'phpmd']
# let g:syntastic_php_phpcs_args="--standard=psr2"
# let g:syntastic_php_phpmd_post_args='codesize,design,unusedcode,naming'
# let g:syntastic_scss_checkers = ['stylelint']
# let g:syntastic_scss_stylelint_args = "--config ~/.stylelintrc"
# let g:syntastic_swift_checkers = ['swiftpm', 'swiftlint']
# '''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
" open on vim started (exclude when it open with filename)
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") && !has('gui_running') | NERDTree | endif

" open hidden files
let NERDTreeShowHidden = 1

" set indicators

" let g:NERDTreeIndicatorMapCustom = {
let g:NERDTreeGitStatusIndicatorMapCustom = {
    \ "Modified"  : "*",
    \ "Staged"    : "+",
    \ "Untracked" : "!",
    \ "Renamed"   : "-",
    \ "Unmerged"  : "=",
    \ "Deleted"   : "x",
    \ "Dirty"     : "X",
    \ "Clean"     : "$",
    \ "Unknown"   : "?"
    \ }

" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
 exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
 exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

" extension, fg, bg, guifg, guibg
call NERDTreeHighlightFile('py',     'yellow',  'none', 'yellow',  '#151515')
call NERDTreeHighlightFile('md',     'blue',    'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml',    'yellow',  'none', 'yellow',  '#151515')
call NERDTreeHighlightFile('config', 'yellow',  'none', 'yellow',  '#151515')
call NERDTreeHighlightFile('conf',   'yellow',  'none', 'yellow',  '#151515')
call NERDTreeHighlightFile('json',   'yellow',  'none', 'yellow',  '#151515')
call NERDTreeHighlightFile('html',   'yellow',  'none', 'yellow',  '#151515')
call NERDTreeHighlightFile('styl',   'cyan',    'none', 'cyan',    '#151515')
call NERDTreeHighlightFile('css',    'cyan',    'none', 'cyan',    '#151515')
call NERDTreeHighlightFile('rb',     'Red',     'none', 'red',     '#151515')
call NERDTreeHighlightFile('js',     'Red',     'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('jsx',    'Red',     'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php',    'Magenta', 'none', '#ff00ff', '#151515')

" ignore
let NERDTreeIgnore=['\.DS_Store$']

" keymapping
nnoremap <F9> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
depends = 'nerdtree'


[[plugins]]
repo = 'Shougo/defx.nvim'
depends = '''
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
  \ defx#do_action('open')
  nnoremap <silent><buffer><expr> l
  \ defx#do_action('open')
  nnoremap <silent><buffer><expr> E
  \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
  \ defx#do_action('open', 'pedit')
  nnoremap <silent><buffer><expr> K
  \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
  \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> d
  \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
  \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> x
  \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> h
  \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
  \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
  \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
  \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
  \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
  \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
  \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
  \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
  \ defx#do_action('print')
endfunction
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
depends = '''
let g:lightline = { 'colorscheme': 'solarized' }
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
depends = '''
let g:indent_guides_start_level=2
let g:indent_guides_auto_colors=0
let g:indent_guides_enable_on_vim_startup=0
let g:indent_guides_color_change_percent=20
let g:indent_guides_guide_size=1
let g:indent_guides_space_guides=1
hi IndentGuidesOdd  ctermbg=235
hi IndentGuidesEven ctermbg=236
au FileType coffee,ruby,javascript,python,json,aspnetcs,vim IndentGuidesEnable
nmap <silent><Leader>ig <Plug>IndentGuidesToggle
'''

[[plugins]]
repo = 'tyru/caw.vim'
depends = '''
nmap <C-c> <Plug>(caw:hatpos:toggle)
vmap <C-c> <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'tpope/vim-surround'

# html, css, sass
[[plugins]]
repo = 'mattn/emmet-vim'

[[plugins]]
repo = 'digitaltoad/vim-pug'
on_ft = ['pug', 'jade']

[[plugins]]
repo = 'nikvdp/ejs-syntax'
on_ft = ['ejs']

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = ['slim']

[[plugins]]
repo = 'lumiliet/vim-twig'
on_ft = ['twig']

[[plugins]]
repo = 'yosssi/vim-ace'

[[plugins]]
repo = 'gorodinskiy/vim-coloresque'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['css', 'scss']

[[plugins]]
repo = 'cakebaker/scss-syntax.vim'
on_ft = ['scss']

[[plugins]]
repo = 'lilydjwg/colorizer'

# JavaScript, altJS
[[plugins]]
repo = 'othree/yajs.vim'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]]
repo = 'othree/es.next.syntax.vim'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]]
repo = 'heavenshell/vim-jsdoc.git'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]]
repo = 'othree/javascript-libraries-syntax.vim'
on_ft = ['javascript', 'javascript.jsx', 'typescript']
hook_add = '''
let g:used_javascript_libs = 'jquery,underscore,angularjs,angularui,angularuirouter,react,flux,requirejs,jasmine,chai,handlebars,ramda,vue,d3'
'''

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = ['coffeescript']

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']

[[plugins]]
repo = 'clausreinke/typescript-tools.vim'
on_ft = ['typescript']

[[plugins]]
repo = 'flowtype/vim-flow'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]]
repo = 'mxw/vim-jsx'
on_ft = ['javascript.jsx']

# Ruby

[[plugins]]
repo = 'tpope/vim-rails.git'
on_ft = ['ruby', 'eruby']

[[plugins]]
repo = 'tpope/vim-bundler.git'
on_ft = ['ruby', 'eruby']

[[plugins]]
repo = 'tpope/vim-endwise'
on_ft = ['ruby', 'eruby']

[[plugins]]
repo = 'vim-scripts/ruby-matchit'
on_ft = ['ruby', 'eruby']

[[plugins]]
repo = 'Keithbsmiley/rspec.vim'
on_ft = ['ruby', 'eruby']

[[plugins]]
repo = 'thoughtbot/vim-rspec'
on_ft = ['ruby', 'eruby']

[[plugins]]
repo = 'osyo-manga/vim-monster'
on_ft = ['ruby', 'eruby']

[[plugins]]
repo = 'tpope/vim-dispatch'
on_ft = ['ruby', 'eruby']

[[plugins]]
repo = 'thinca/vim-ref'
on_ft = ['ruby', 'eruby']

# Swift
[[plugins]]
repo = 'keith/swift.vim'
on_ft = ['swift']

# markdown
[[plugins]]
repo = 'kannokanno/previm'
on_ft = ['markdown', 'textile']
hook_add = 'autocmd FileType textile,markdown nnoremap <F2> :PrevimOpen<CR>'

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown']
hook_add = '''
let g:vim_markdown_folding_disabled=1
if has("mac")
    " markdown
    autocmd FileType markdown nnoremap <F2> :QuickRun<CR>
endif
'''

# other syntax
[[plugins]]
repo = 'elixir-lang/vim-elixir'
on_ft = ['elixir']

[[plugins]]
repo = 'neovimhaskell/haskell-vim'
on_ft = ['haskell']

[[plugins]]
repo = 'elzr/vim-json'
on_ft = ['json']
hook_add = '''
let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'vim-scripts/aspnetcs.git'
on_ft = ['csharp']

[[plugins]]
repo = "ekalinin/Dockerfile.vim"
on_ft = ['Dockerfile']

[[plugins]]
repo = 'chase/vim-ansible-yaml'

[[plugins]]
repo = 'timcharper/textile.vim'
on_ft = ['textile']

[[plugins]]
repo = 'Keithbsmiley/tmux.vim'

[[plugins]]
repo = 'dag/vim-fish'
on_ft = ['fish']
#
#     # " utility
#     # repo = 'Shougo/vimproc.vim', {'build' : 'make'}
#     # repo = 'kien/ctrlp.vim.git'
#     # repo = 'Shougo/neosnippet'
#     # repo = 'Shougo/neosnippet-snippets'
#     # repo = 'honza/vim-snippets'
#     # repo = 'Townk/vim-autoclose'
#     # repo = 'terryma/vim-multiple-cursors'
#     # repo = 'Shougo/unite.vim.git'
#     # repo = 'h1mesuke/unite-outline.git'
#     # repo = 'szw/vim-tags'
#     # repo = 'majutsushi/tagbar.git'
#     # repo = 'osyo-manga/vim-over'
#     # repo = 'AndrewRadev/switch.vim'
#     # repo = 'AndrewRadev/splitjoin.vim'
#     #
#     # " Python
#     # " repo = 'davidhalter/jedi-vim'
#     # " repo = 'andviro/flake8-vim'
#     # " repo = 'hynek/vim-python-pep8-indent'
#     # " repo = 'jmcantrell/vim-virtualenv'
#
#
#
#

# theme
# FIXME: White out
# [[plugins]]
# repo = 'altercation/vim-colors-solarized'
# hook_add = '''
# set background=dark
# let scheme = 'solarized'
# augroup guicolorscheme
#     autocmd!
#     execute 'autocmd VimEnter * nested colorscheme' scheme
# augroup END
# '''
